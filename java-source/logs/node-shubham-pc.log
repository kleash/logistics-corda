[INFO ] 2019-02-11T05:07:33,188Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-f4fd357b-b315-4962-83a5-a73f078f3293.jar {}
[INFO ] 2019-02-11T05:07:33,266Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-f4fd357b-b315-4962-83a5-a73f078f3293.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T05:07:33,312Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:07:33,316Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:07:33,333Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-f4fd357b-b315-4962-83a5-a73f078f3293.jar {}
[INFO ] 2019-02-11T05:07:33,574Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48b744fd {}
[INFO ] 2019-02-11T05:07:34,690Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:07:34,764Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:07:34,770Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:07:37,194Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:07:37,875Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:07:37,879Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:37,899Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:38,041Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:38,045Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:38,307Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:07:38,316Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T05:07:38,482Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T05:07:38,703Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 049BDD64B3E4E8CFFA5499AE2D447AAE77E243ADB69B91E80F7C57B3D0B3B736, not inserting the second time {}
[INFO ] 2019-02-11T05:07:38,798Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:38,831Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:07:38,834Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:38,838Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:38,841Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:07:38,844Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:38,851Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:07:38,854Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:07:38,886Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:07:38,904Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@16e1a441 {}
[INFO ] 2019-02-11T05:07:38,926Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:07:38,930Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:07:38,933Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:07:39,138Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:07:39,153Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:07:39,156Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,166Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:39,179Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,182Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,274Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:07:39,277Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:07:39,313Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A3577A8DEA68D455E5D54ACB913AA7B3E5E7B2A7A46529B38778A6B82542BCCA, not inserting the second time {}
[INFO ] 2019-02-11T05:07:39,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:39,356Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:39,378Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:39,380Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,385Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:39,412Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,415Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,427Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:07:39,434Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,439Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,450Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:07:39,459Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:39,470Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:07:39,483Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:07:39,518Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:07:39,544Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@8c29e75 {}
[INFO ] 2019-02-11T05:07:39,567Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:07:39,575Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:07:39,577Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:07:39,763Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:07:39,782Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:07:39,785Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:39,796Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:39,808Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:39,810Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:39,887Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:07:39,889Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:07:39,921Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 24AFDE79CABAA7F60AB7C88B67E62C4668535F0B66980561FDAAAB3DD0BAB133, not inserting the second time {}
[INFO ] 2019-02-11T05:07:39,933Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:39,947Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:39,966Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861657879) {}
[INFO ] 2019-02-11T05:07:39,978Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:39,982Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:40,001Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:40,003Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:40,009Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:40,029Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861659156) {}
[INFO ] 2019-02-11T05:07:40,032Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:40,037Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:07:40,055Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:40,058Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:40,067Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:07:40,069Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:40,072Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[INFO ] 2019-02-11T05:07:40,074Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:07:40,078Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861659785) {}
[WARN ] 2019-02-11T05:07:41,351Z [Mock network] flow.[593ce556-f300-4267-9ac4-9da7f29ce90c].run - Terminated by unexpected exception {}
java.lang.NullPointerException: null
	at com.nec.endmile.state.CourierState.generateMappedObject(CourierState.java:216) ~[classes/:?]
	at net.corda.node.services.schema.NodeSchemaService.generateMappedObject(NodeSchemaService.kt:93) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persistStatesWithSchema$node(PersistentStateService.kt:47) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persist(PersistentStateService.kt:41) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.processAndNotify(NodeVaultService.kt:216) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.access$processAndNotify(NodeVaultService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService$notifyAll$1.invoke(NodeVaultService.kt:120) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.notifyAll(NodeVaultService.kt:130) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt:118) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:876) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:136) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:875) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:201) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:193) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.notariseAndRecord(FinalityFlow.kt:78) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:56) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:28) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:103) ~[classes/:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:20) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_192]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_192]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-02-11T05:12:50,080Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-86d3da61-4f5c-4a3f-8d41-391369e8444c.jar {}
[INFO ] 2019-02-11T05:12:50,113Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-86d3da61-4f5c-4a3f-8d41-391369e8444c.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T05:12:50,145Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:12:50,151Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:12:50,173Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-86d3da61-4f5c-4a3f-8d41-391369e8444c.jar {}
[INFO ] 2019-02-11T05:12:50,338Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1e084a26 {}
[INFO ] 2019-02-11T05:12:51,334Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:12:51,385Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:12:51,391Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:12:53,780Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:12:54,450Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:12:54,454Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:54,471Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:54,606Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:54,610Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:54,857Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:12:54,871Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T05:12:55,003Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T05:12:55,352Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E81E76F92F3DDE8B3688DB51F48821C7940D09D08DD8060D16428E934DFD8150, not inserting the second time {}
[INFO ] 2019-02-11T05:12:55,489Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:55,553Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:12:55,571Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:55,590Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:55,597Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:12:55,601Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:55,612Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:12:55,616Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:12:55,668Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:12:55,685Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@7fa0f739 {}
[INFO ] 2019-02-11T05:12:55,715Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:12:55,719Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:12:55,723Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:12:56,002Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:12:56,021Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:12:56,024Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,033Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:56,042Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,045Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,146Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:12:56,149Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:12:56,211Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 59D916F704CE9B0F52DE1FB01AE74CE37F8CACCB38DC354D2FC6800FCED1D815, not inserting the second time {}
[INFO ] 2019-02-11T05:12:56,271Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:56,278Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:56,306Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:56,308Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,313Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:56,337Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,348Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:12:56,351Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,354Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,355Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:12:56,358Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,362Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:12:56,367Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:12:56,396Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:12:56,411Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@5e39a9ba {}
[INFO ] 2019-02-11T05:12:56,442Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:12:56,446Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:12:56,452Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:12:56,727Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:12:56,754Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:12:56,757Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:56,765Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:56,775Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:56,777Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:56,861Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:12:56,864Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:12:56,907Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key A5D8C77010ED540A49EB8135F4339C539BF396EDA745F29504EDC78352AB65AF, not inserting the second time {}
[INFO ] 2019-02-11T05:12:56,928Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:56,940Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:56,961Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549861974454) {}
[INFO ] 2019-02-11T05:12:56,963Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:56,968Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:56,985Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:56,987Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:56,991Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:57,007Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549861976024) {}
[INFO ] 2019-02-11T05:12:57,010Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:57,014Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:12:57,030Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:57,033Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:57,042Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:12:57,044Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:57,045Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[INFO ] 2019-02-11T05:12:57,047Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:12:57,049Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549861976757) {}
[WARN ] 2019-02-11T05:12:58,155Z [Mock network] flow.[0fa87967-a236-47a5-b336-6ce5378f611e].run - Terminated by unexpected exception {}
java.lang.NullPointerException: null
	at com.nec.endmile.state.CourierState.generateMappedObject(CourierState.java:216) ~[classes/:?]
	at net.corda.node.services.schema.NodeSchemaService.generateMappedObject(NodeSchemaService.kt:93) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persistStatesWithSchema$node(PersistentStateService.kt:47) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persist(PersistentStateService.kt:41) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.processAndNotify(NodeVaultService.kt:216) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.access$processAndNotify(NodeVaultService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService$notifyAll$1.invoke(NodeVaultService.kt:120) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.notifyAll(NodeVaultService.kt:130) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt:118) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:876) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:136) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:875) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:201) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:193) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.notariseAndRecord(FinalityFlow.kt:78) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:56) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:28) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:103) ~[classes/:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:20) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_192]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_192]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-02-11T05:15:31,361Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-36401ea1-69a4-4951-96c4-e18f159f32d0.jar {}
[INFO ] 2019-02-11T05:15:31,397Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-36401ea1-69a4-4951-96c4-e18f159f32d0.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T05:15:31,436Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:15:31,441Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:15:31,457Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-36401ea1-69a4-4951-96c4-e18f159f32d0.jar {}
[INFO ] 2019-02-11T05:15:31,620Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1067192a {}
[INFO ] 2019-02-11T05:15:32,396Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:15:32,441Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:15:32,446Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:15:34,954Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:15:35,561Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:15:35,565Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:35,580Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:35,712Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:35,715Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:35,947Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:15:35,958Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T05:15:36,094Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T05:15:36,333Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 71D85AE6400B87A31BC52DCA48AFD193A5ED6E008B9AEE1C05767D64C96C9D06, not inserting the second time {}
[INFO ] 2019-02-11T05:15:36,424Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:36,464Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:15:36,468Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:36,473Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:36,477Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:15:36,481Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:36,489Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:15:36,492Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:15:36,552Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:15:36,574Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@12223aed {}
[INFO ] 2019-02-11T05:15:36,602Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:15:36,609Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:15:36,614Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:15:36,842Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:15:36,863Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:15:36,866Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:36,880Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:36,890Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:36,894Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:36,973Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:15:36,978Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:15:37,019Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B4D13827715E3123C5C4CA1DA8878F4433FD037A734744A5F36DD80525C1BB8C, not inserting the second time {}
[INFO ] 2019-02-11T05:15:37,034Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:37,039Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:37,080Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:37,082Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,086Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:37,118Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,125Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,137Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:15:37,141Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,150Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,158Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:15:37,168Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,173Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:15:37,176Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:15:37,206Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:15:37,221Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@279afa1c {}
[INFO ] 2019-02-11T05:15:37,245Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:15:37,249Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:15:37,252Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:15:37,437Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:15:37,452Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:15:37,456Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,464Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:37,474Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,477Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,571Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:15:37,574Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:15:37,602Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5DC805E699E9FD2FF6502D4B6DDB7AE89E7239301A852F05CE8289626F9E256F, not inserting the second time {}
[INFO ] 2019-02-11T05:15:37,621Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:37,627Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:37,646Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549862135565) {}
[INFO ] 2019-02-11T05:15:37,649Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,653Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:37,675Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,683Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:37,701Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549862136866) {}
[INFO ] 2019-02-11T05:15:37,703Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,709Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:15:37,728Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,730Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,738Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:15:37,740Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,741Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[INFO ] 2019-02-11T05:15:37,743Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:15:37,745Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549862137455) {}
[WARN ] 2019-02-11T05:15:38,749Z [Mock network] flow.[702aa02e-f984-4cb5-a3cc-115ddb7cd220].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: Unknown entity: com.nec.endmile.schema.CourierSchemaV1$PersistentCourier
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:777) ~[hibernate-core-5.2.6.Final.jar:5.2.6.Final]
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758) ~[hibernate-core-5.2.6.Final.jar:5.2.6.Final]
	at net.corda.node.services.schema.PersistentStateService.persistStatesWithSchema$node(PersistentStateService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persist(PersistentStateService.kt:41) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.processAndNotify(NodeVaultService.kt:216) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.access$processAndNotify(NodeVaultService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService$notifyAll$1.invoke(NodeVaultService.kt:120) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.notifyAll(NodeVaultService.kt:130) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt:118) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:876) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:136) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:875) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:201) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:193) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.notariseAndRecord(FinalityFlow.kt:78) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:56) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:28) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:103) ~[classes/:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:20) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_192]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_192]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-02-11T05:43:35,486Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-17e91e54-7c43-44db-8115-fd8a82bf0c1d.jar {}
[INFO ] 2019-02-11T05:43:35,530Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-17e91e54-7c43-44db-8115-fd8a82bf0c1d.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T05:43:35,569Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:43:35,575Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:43:35,595Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-17e91e54-7c43-44db-8115-fd8a82bf0c1d.jar {}
[INFO ] 2019-02-11T05:43:35,770Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@29b2a94c {}
[INFO ] 2019-02-11T05:43:36,622Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:43:36,668Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:43:36,672Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:43:39,263Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:43:39,998Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:43:40,002Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:40,022Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:40,218Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:40,223Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:40,496Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:43:40,506Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T05:43:40,649Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T05:43:40,886Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 619AB200E4806AE869BBAD549C768935773A0E7940C1F094C290E55E00EC81D9, not inserting the second time {}
[INFO ] 2019-02-11T05:43:40,979Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:41,006Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:43:41,009Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:41,013Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:41,016Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:43:41,020Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:41,027Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:43:41,029Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:43:41,059Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:43:41,074Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@618dbfd4 {}
[INFO ] 2019-02-11T05:43:41,093Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:43:41,097Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:43:41,101Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:43:41,319Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:43:41,339Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:43:41,342Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,350Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:41,359Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,363Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,451Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:43:41,454Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:43:41,490Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key E130DC5BFCEC6C3795EA3379B4084FF0FFD23DAF23CC1E6F1B9384B4960B6007, not inserting the second time {}
[INFO ] 2019-02-11T05:43:41,514Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:41,524Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:41,546Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:41,549Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,556Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:41,581Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,584Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,593Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:43:41,596Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,597Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,599Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:43:41,603Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:41,608Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:43:41,611Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:43:41,641Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:43:41,656Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@167fdc7d {}
[INFO ] 2019-02-11T05:43:41,675Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:43:41,679Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:43:41,682Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:43:41,889Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:43:41,905Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:43:41,908Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:41,921Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:41,930Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:41,934Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,035Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:43:42,038Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:43:42,066Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 7D1E1FB5813CE23D42DE0A8AA28F28C77684FE2C01157AA878124EC407D3978D, not inserting the second time {}
[INFO ] 2019-02-11T05:43:42,078Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:42,085Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:42,101Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549863820002) {}
[INFO ] 2019-02-11T05:43:42,104Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,112Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:42,147Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,151Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:42,159Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:42,176Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549863821342) {}
[INFO ] 2019-02-11T05:43:42,179Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,183Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:43:42,205Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,207Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,220Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:43:42,222Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,224Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[INFO ] 2019-02-11T05:43:42,226Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:43:42,228Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549863821908) {}
[WARN ] 2019-02-11T05:43:43,263Z [Mock network] flow.[225ec163-6f61-4be9-9af4-5299a52a7ce4].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll, parameter elements
	at kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(MutableCollections.kt) ~[kotlin-stdlib-1.1.60.jar:1.1.60-release-55 (1.1.60)]
	at net.corda.core.flows.FinalityFlow.getPartiesToSend(FinalityFlow.kt:122) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:54) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:28) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:120) ~[classes/:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:26) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_192]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_192]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-02-11T05:47:18,113Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-afcf6385-5c11-4936-9f94-b6b0fd5fdc1a.jar {}
[INFO ] 2019-02-11T05:47:18,165Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-afcf6385-5c11-4936-9f94-b6b0fd5fdc1a.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T05:47:18,200Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:47:18,205Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:47:18,220Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-afcf6385-5c11-4936-9f94-b6b0fd5fdc1a.jar {}
[INFO ] 2019-02-11T05:47:18,354Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@3a5c6009 {}
[INFO ] 2019-02-11T05:47:19,296Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:47:19,348Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:47:19,353Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:47:21,741Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:47:22,457Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:47:22,461Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:22,478Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:22,642Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:22,645Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:22,913Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:47:22,922Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T05:47:23,066Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T05:47:23,342Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key D941DDD2FBC533DFD6381A996D1B12A6B60E52367C23A49F07626EC9DE5E85FE, not inserting the second time {}
[INFO ] 2019-02-11T05:47:23,446Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:23,485Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:47:23,489Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:23,493Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:23,496Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:47:23,499Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:23,506Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:47:23,510Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:47:23,541Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:47:23,565Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@407858c5 {}
[INFO ] 2019-02-11T05:47:23,596Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:47:23,601Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:47:23,605Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:47:23,780Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:47:23,799Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:47:23,802Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:23,813Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:23,822Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:23,827Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:23,916Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:47:23,919Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:47:23,949Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C284B9117B41EDAB7D9BD9351D8F3267FDF27955887D659074520BCE141D814C, not inserting the second time {}
[INFO ] 2019-02-11T05:47:23,963Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:23,969Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:24,003Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:24,008Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,014Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:24,039Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,043Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,054Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:47:24,058Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,061Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,063Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:47:24,066Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,071Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:47:24,075Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:47:24,106Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:47:24,123Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@29e7da9c {}
[INFO ] 2019-02-11T05:47:24,152Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:47:24,159Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:47:24,162Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:47:24,380Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:47:24,394Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:47:24,396Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,404Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:24,412Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,414Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,496Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:47:24,498Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:47:24,523Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key AE7913FA577C3B346F13860CF88C8FB613500DAE6B7D965283DE57BA358D4924, not inserting the second time {}
[INFO ] 2019-02-11T05:47:24,537Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:24,565Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:24,593Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864042461) {}
[INFO ] 2019-02-11T05:47:24,597Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,602Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:24,630Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,632Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,646Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:24,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864043802) {}
[INFO ] 2019-02-11T05:47:24,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,683Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:47:24,698Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,700Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,708Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:47:24,710Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,712Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[INFO ] 2019-02-11T05:47:24,714Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:47:24,716Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864044396) {}
[WARN ] 2019-02-11T05:47:25,762Z [Mock network] flow.[82e10700-afc4-4156-8410-699be59e35f6].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: Unknown entity: com.nec.endmile.schema.CourierSchemaV1$PersistentCourier
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:777) ~[hibernate-core-5.2.6.Final.jar:5.2.6.Final]
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758) ~[hibernate-core-5.2.6.Final.jar:5.2.6.Final]
	at net.corda.node.services.schema.PersistentStateService.persistStatesWithSchema$node(PersistentStateService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persist(PersistentStateService.kt:41) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.processAndNotify(NodeVaultService.kt:216) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.access$processAndNotify(NodeVaultService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService$notifyAll$1.invoke(NodeVaultService.kt:120) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.notifyAll(NodeVaultService.kt:130) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt:118) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:876) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:136) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:875) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:201) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:193) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.notariseAndRecord(FinalityFlow.kt:78) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:56) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:28) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:120) ~[classes/:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:26) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_192]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_192]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-02-11T05:51:58,848Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-ab6c8b5f-b2f9-489d-b760-a2fec3ce7111.jar {}
[INFO ] 2019-02-11T05:51:58,888Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-ab6c8b5f-b2f9-489d-b760-a2fec3ce7111.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T05:51:58,926Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:51:58,934Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:51:58,957Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-ab6c8b5f-b2f9-489d-b760-a2fec3ce7111.jar {}
[INFO ] 2019-02-11T05:51:59,114Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@48cc060d {}
[INFO ] 2019-02-11T05:51:59,954Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:51:59,998Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:52:00,004Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:52:02,426Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1)] {}
[INFO ] 2019-02-11T05:52:03,120Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:52:03,124Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:03,146Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:03,321Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:03,324Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:03,585Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:52:03,595Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T05:52:03,711Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T05:52:03,948Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 321B5E805C03B4FB20EEC984C3CC045801B6D91AC21FFB154E5DA6E3F66BE928, not inserting the second time {}
[INFO ] 2019-02-11T05:52:04,033Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:04,069Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:52:04,073Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:04,078Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:04,081Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:52:04,085Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:04,092Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:52:04,095Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:52:04,123Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:52:04,142Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a85a13 {}
[INFO ] 2019-02-11T05:52:04,179Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:52:04,188Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:52:04,192Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:52:04,418Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:52:04,440Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:52:04,443Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,456Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:04,467Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,470Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,561Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:52:04,563Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:52:04,593Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 46B5E1946FFBAFEA8B4D1AE2100EBD4B97DB64EE3DDED338131F6C52E00A4214, not inserting the second time {}
[INFO ] 2019-02-11T05:52:04,608Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:04,614Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:04,641Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:04,644Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,649Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:04,676Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,680Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,700Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:52:04,703Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,706Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,708Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:52:04,713Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:04,717Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:52:04,721Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:52:04,752Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T05:52:04,767Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@352969e7 {}
[INFO ] 2019-02-11T05:52:04,783Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:52:04,785Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:52:04,787Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:52:04,996Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-02-11T05:52:05,008Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T05:52:05,011Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,018Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:05,026Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,028Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,096Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T05:52:05,099Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T05:52:05,128Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DF475E08D29696A73986369965353B4D5853B5FCF0CA379E7716A01A74E63316, not inserting the second time {}
[INFO ] 2019-02-11T05:52:05,143Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:05,148Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:05,168Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549864323124) {}
[INFO ] 2019-02-11T05:52:05,174Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,180Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:05,261Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,264Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:05,272Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:05,288Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549864324443) {}
[INFO ] 2019-02-11T05:52:05,291Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,297Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T05:52:05,316Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,319Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,328Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:52:05,331Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,333Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[INFO ] 2019-02-11T05:52:05,335Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T05:52:05,341Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549864325011) {}
[WARN ] 2019-02-11T05:52:06,494Z [Mock network] flow.[bf3f8969-583f-4dd9-9d23-e8aca7fe08f3].run - Terminated by unexpected exception {}
java.lang.IllegalArgumentException: Unknown entity: com.nec.endmile.schema.CourierSchemaV1$PersistentCourier
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:777) ~[hibernate-core-5.2.6.Final.jar:5.2.6.Final]
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758) ~[hibernate-core-5.2.6.Final.jar:5.2.6.Final]
	at net.corda.node.services.schema.PersistentStateService.persistStatesWithSchema$node(PersistentStateService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.schema.PersistentStateService.persist(PersistentStateService.kt:41) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.processAndNotify(NodeVaultService.kt:216) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.access$processAndNotify(NodeVaultService.kt:49) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService$notifyAll$1.invoke(NodeVaultService.kt:120) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.vault.NodeVaultService.notifyAll(NodeVaultService.kt:130) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt:118) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:876) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl$recordTransactions$1.invoke(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:136) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:124) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.nodeapi.internal.persistence.CordaPersistence.transaction(CordaPersistence.kt:131) ~[corda-node-api-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:875) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:201) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.node.ServiceHub$DefaultImpls.recordTransactions(ServiceHub.kt:193) ~[corda-core-3.3-corda.jar:?]
	at net.corda.node.services.api.ServiceHubInternal$DefaultImpls.recordTransactions(ServiceHubInternal.kt) ~[corda-node-3.3-corda.jar:?]
	at net.corda.node.internal.AbstractNode$ServiceHubInternalImpl.recordTransactions(AbstractNode.kt:836) ~[corda-node-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.notariseAndRecord(FinalityFlow.kt:78) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:56) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FinalityFlow.call(FinalityFlow.kt:28) ~[corda-core-3.3-corda.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:290) ~[corda-core-3.3-corda.jar:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:119) ~[classes/:?]
	at com.nec.endmile.flow.CourierRequestFlow$Initiator.call(CourierRequestFlow.java:26) ~[classes/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:96) [corda-node-3.3-corda.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:44) [corda-node-3.3-corda.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) [quasar-core-0.7.9-jdk8.jar:0.7.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_192]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_192]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_192]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_192]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:62) [corda-node-3.3-corda.jar:?]
[INFO ] 2019-02-11T05:54:56,068Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-e1ac9265-3782-42d0-9e06-50c76174e43f.jar {}
[INFO ] 2019-02-11T05:54:56,087Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.schema in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/schema: build/tmp/generated-test-cordapps/com.nec.endmile.schema-88a22b79-74eb-4aa7-ac9c-f10f4d37593f.jar {}
[INFO ] 2019-02-11T05:54:56,111Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-e1ac9265-3782-42d0-9e06-50c76174e43f.jar, rootPackageName=null), RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-88a22b79-74eb-4aa7-ac9c-f10f4d37593f.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T05:54:56,152Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T05:54:56,156Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T05:54:56,173Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-e1ac9265-3782-42d0-9e06-50c76174e43f.jar {}
[INFO ] 2019-02-11T05:54:56,197Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-88a22b79-74eb-4aa7-ac9c-f10f4d37593f.jar {}
[INFO ] 2019-02-11T05:54:56,362Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ac0cb64 {}
[INFO ] 2019-02-11T05:54:57,159Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T05:54:57,209Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T05:54:57,215Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:14:24,284Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-7aa1f0b6-26ea-4173-bfb9-374bf5b80e5e.jar {}
[INFO ] 2019-02-11T07:14:24,312Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.schema in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/schema: build/tmp/generated-test-cordapps/com.nec.endmile.schema-ceccee54-3660-4b2d-85f4-93fcb7e58552.jar {}
[INFO ] 2019-02-11T07:14:24,347Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-7aa1f0b6-26ea-4173-bfb9-374bf5b80e5e.jar, rootPackageName=null), RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-ceccee54-3660-4b2d-85f4-93fcb7e58552.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T07:14:24,389Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:14:24,394Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:14:24,414Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-7aa1f0b6-26ea-4173-bfb9-374bf5b80e5e.jar {}
[INFO ] 2019-02-11T07:14:24,447Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-ceccee54-3660-4b2d-85f4-93fcb7e58552.jar {}
[INFO ] 2019-02-11T07:14:24,612Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@62966c9f {}
[INFO ] 2019-02-11T07:14:25,509Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:14:25,574Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:14:25,578Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:36,479Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-992ee335-a428-487b-bb51-f9f2a7913049.jar {}
[INFO ] 2019-02-11T07:16:36,504Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.schema in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/schema: build/tmp/generated-test-cordapps/com.nec.endmile.schema-d8a6de90-fe41-463f-b833-63f994920c43.jar {}
[INFO ] 2019-02-11T07:16:36,534Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-992ee335-a428-487b-bb51-f9f2a7913049.jar, rootPackageName=null), RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-d8a6de90-fe41-463f-b833-63f994920c43.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T07:16:36,574Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:16:36,578Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:16:36,594Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-992ee335-a428-487b-bb51-f9f2a7913049.jar {}
[INFO ] 2019-02-11T07:16:36,625Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-d8a6de90-fe41-463f-b833-63f994920c43.jar {}
[INFO ] 2019-02-11T07:16:36,777Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@2ef3efcc {}
[INFO ] 2019-02-11T07:16:37,660Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:16:37,721Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:37,726Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:40,105Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:40,778Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:16:40,782Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:40,799Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:40,944Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:40,947Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:41,187Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:16:41,198Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T07:16:41,349Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T07:16:41,640Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 11BE8F0BD2AEF13B29D72F3D240EFD7F5F7536BA10B6B0727EBE9D0393348272, not inserting the second time {}
[INFO ] 2019-02-11T07:16:41,737Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:41,770Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:16:41,773Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:41,776Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:41,779Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:16:41,782Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:41,791Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:16:41,794Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:16:41,833Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:16:41,859Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@28c319a2 {}
[INFO ] 2019-02-11T07:16:41,890Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:16:41,893Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:41,899Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:42,123Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:42,141Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:16:42,144Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,155Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,170Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,173Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,264Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:16:42,268Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:16:42,297Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 852860BD5C15CED30329F1414198E027AB23853B0F4CB00625C047C2A3E7B7FB, not inserting the second time {}
[INFO ] 2019-02-11T07:16:42,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:42,315Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,340Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:42,347Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,352Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,374Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,377Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,390Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:16:42,393Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,397Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,402Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:16:42,405Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,411Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:16:42,416Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:16:42,449Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:16:42,466Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@596707f5 {}
[INFO ] 2019-02-11T07:16:42,485Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:16:42,488Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:42,491Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:42,691Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:16:42,706Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:16:42,709Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,717Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,727Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,729Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,794Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:16:42,797Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:16:42,827Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DAC51ADF9800EC5DA0E76E52629D6F987CBAF98812A263FF55C22C8D3C8A9304, not inserting the second time {}
[INFO ] 2019-02-11T07:16:42,841Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:42,847Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,871Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869400781) {}
[INFO ] 2019-02-11T07:16:42,874Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,885Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,909Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,912Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,920Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,941Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869402144) {}
[INFO ] 2019-02-11T07:16:42,943Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,951Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:16:42,970Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,972Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,981Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:16:42,983Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,987Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[INFO ] 2019-02-11T07:16:42,989Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:16:42,992Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869402709) {}
[WARN ] 2019-02-11T07:16:43,954Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[WARN ] 2019-02-11T07:16:43,991Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[INFO ] 2019-02-11T07:16:44,379Z [Mock network] flow.[65d9cb4f-a084-42fd-902c-0c3446b98091].initiateSession - Initiating flow session with party O=NECAuto, L=New York, C=US. Session id for tracing purposes is SessionId(toLong=-8188301387811304052). {}
[INFO ] 2019-02-11T07:16:44,586Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Amazon, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-8188301387811304052). {invocation_id=9c5b1d59-1cfe-4264-9352-6bb1b21d61a3, invocation_timestamp=2019-02-11T07:16:44.575Z, session_id=9c5b1d59-1cfe-4264-9352-6bb1b21d61a3, session_timestamp=2019-02-11T07:16:44.575Z}
[INFO ] 2019-02-11T07:16:44,806Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.nec.endmile.state.CourierState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T07:16:44,886Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.nec.endmile.state.CourierState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T07:20:30,012Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-e495c8a9-3ad1-45ee-bf35-9a41d8bc1b80.jar {}
[INFO ] 2019-02-11T07:20:30,039Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.schema in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/schema: build/tmp/generated-test-cordapps/com.nec.endmile.schema-e9242fe1-889c-400a-90dc-52101a18aac7.jar {}
[INFO ] 2019-02-11T07:20:30,072Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-e495c8a9-3ad1-45ee-bf35-9a41d8bc1b80.jar, rootPackageName=null), RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-e9242fe1-889c-400a-90dc-52101a18aac7.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T07:20:30,118Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:20:30,123Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:20:30,141Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-e495c8a9-3ad1-45ee-bf35-9a41d8bc1b80.jar {}
[INFO ] 2019-02-11T07:20:30,172Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-e9242fe1-889c-400a-90dc-52101a18aac7.jar {}
[INFO ] 2019-02-11T07:20:30,362Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@118f39f3 {}
[INFO ] 2019-02-11T07:20:31,123Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:20:31,174Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:31,181Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:33,680Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:34,316Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:20:34,319Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:34,335Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:34,458Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:34,460Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:34,710Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:20:34,721Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T07:20:34,880Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T07:20:35,169Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F075BFD3987781C284022ADA74CEB8B402203589B77ACE71D2F75057F8D40F47, not inserting the second time {}
[INFO ] 2019-02-11T07:20:35,268Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:35,305Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:35,310Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:35,314Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:35,318Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:35,322Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:35,330Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:20:35,332Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:20:35,365Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:20:35,382Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@843498c {}
[INFO ] 2019-02-11T07:20:35,408Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:20:35,412Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:35,416Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:35,652Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:35,676Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:20:35,678Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,691Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:35,703Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,708Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,782Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:20:35,786Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:20:35,820Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 51D9E858B8269E2FC7382680E8EB6B26FC1ECF38E3001F5D4479D337147A00DF, not inserting the second time {}
[INFO ] 2019-02-11T07:20:35,836Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:35,844Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:35,872Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:35,877Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,884Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:35,917Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,919Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,935Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:35,939Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,942Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,950Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:35,954Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:35,963Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:20:35,967Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:20:36,007Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:20:36,025Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@667b3972 {}
[INFO ] 2019-02-11T07:20:36,062Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:20:36,065Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:36,069Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:36,298Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:36,319Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:20:36,322Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,333Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:36,342Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,345Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,416Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:20:36,419Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:20:36,444Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B77A09E7DE3BA5748D666D66DDF06A9D49FFE9CC23CEDC078F9785A41A87F630, not inserting the second time {}
[INFO ] 2019-02-11T07:20:36,458Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:36,463Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:36,483Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869634319) {}
[INFO ] 2019-02-11T07:20:36,485Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,489Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:36,518Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,523Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:36,529Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:36,561Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869635678) {}
[INFO ] 2019-02-11T07:20:36,564Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,568Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:36,592Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,595Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,605Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:36,609Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,612Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[INFO ] 2019-02-11T07:20:36,614Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:36,615Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869636322) {}
[WARN ] 2019-02-11T07:20:37,364Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[WARN ] 2019-02-11T07:20:37,391Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[INFO ] 2019-02-11T07:20:37,707Z [Mock network] flow.[ae04fa9d-ad3a-4180-913f-db1384efb917].initiateSession - Initiating flow session with party O=NECAuto, L=New York, C=US. Session id for tracing purposes is SessionId(toLong=2663571002849316272). {}
[INFO ] 2019-02-11T07:20:37,917Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Amazon, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=2663571002849316272). {invocation_id=15b55fcf-6389-4019-9c61-9fec09b03601, invocation_timestamp=2019-02-11T07:20:37.906Z, session_id=15b55fcf-6389-4019-9c61-9fec09b03601, session_timestamp=2019-02-11T07:20:37.906Z}
[INFO ] 2019-02-11T07:20:38,182Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.nec.endmile.state.CourierState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T07:20:38,256Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.nec.endmile.state.CourierState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T07:20:38,409Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:20:38,423Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:20:38,433Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@166a81d9 {}
[INFO ] 2019-02-11T07:20:38,452Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:20:38,456Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:38,459Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:38,646Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:38,662Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:20:38,664Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:38,670Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:38,686Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:38,688Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:38,788Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:20:38,791Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T07:20:38,801Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T07:20:38,821Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 5F800943BE2353FFBD49FA6C9C559AF206BCEC4E8B53832A94E9642712871807, not inserting the second time {}
[INFO ] 2019-02-11T07:20:38,831Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:38,841Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:38,843Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:38,845Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:38,847Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:38,848Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:38,857Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:20:38,861Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:20:38,894Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:20:38,912Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@1b4d4949 {}
[INFO ] 2019-02-11T07:20:38,943Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:20:38,947Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:38,949Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:39,126Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:39,145Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:20:39,148Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,160Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,168Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,170Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,229Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:20:39,231Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:20:39,261Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B7460B378186E4571D8542A8E263551FC0DE91F744C83658E0EB718114388DAF, not inserting the second time {}
[INFO ] 2019-02-11T07:20:39,270Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:39,277Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,299Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:39,307Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,311Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,333Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,340Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,348Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:39,354Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,356Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,358Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:39,360Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,364Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:20:39,369Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:20:39,395Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:20:39,408Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@239c4792 {}
[INFO ] 2019-02-11T07:20:39,422Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:20:39,425Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:39,428Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:39,670Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:20:39,689Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:20:39,692Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,697Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,704Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,707Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,764Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:20:39,767Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:20:39,804Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 17172AD327737EAD2C9EE2CE2C07474EFD4C9C6D8ADF70A3ED9547997661CDC5, not inserting the second time {}
[INFO ] 2019-02-11T07:20:39,817Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:39,821Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,835Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869638664) {}
[INFO ] 2019-02-11T07:20:39,842Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,844Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,867Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,870Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,877Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,892Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869639148) {}
[INFO ] 2019-02-11T07:20:39,897Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,901Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:20:39,914Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,916Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,925Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:39,927Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,929Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[INFO ] 2019-02-11T07:20:39,931Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:20:39,933Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869639692) {}
[WARN ] 2019-02-11T07:20:39,995Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[WARN ] 2019-02-11T07:20:40,089Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[INFO ] 2019-02-11T07:20:40,306Z [Mock network] flow.[59130ec8-e7eb-4b34-a950-4b09c1982bd2].initiateSession - Initiating flow session with party O=NECAuto, L=New York, C=US. Session id for tracing purposes is SessionId(toLong=1702185941912857633). {}
[INFO ] 2019-02-11T07:20:40,410Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Amazon, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=1702185941912857633). {invocation_id=1e2a795a-6747-45db-a1ac-178e2a3287cd, invocation_timestamp=2019-02-11T07:20:40.408Z, session_id=1e2a795a-6747-45db-a1ac-178e2a3287cd, session_timestamp=2019-02-11T07:20:40.408Z}
[INFO ] 2019-02-11T07:21:12,740Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.contract in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/contract: build/tmp/generated-test-cordapps/com.nec.endmile.contract-d3353c47-aa84-4fe5-8639-d58d29316dd7.jar {}
[INFO ] 2019-02-11T07:21:12,766Z [main] cordapp.CordappLoader.apply - Generating a test-only CorDapp of classes discovered for package com.nec.endmile.schema in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/out/production/classes/com/nec/endmile/schema: build/tmp/generated-test-cordapps/com.nec.endmile.schema-e72ace51-6ce1-405b-82a6-ea0ff37362ae.jar {}
[INFO ] 2019-02-11T07:21:12,802Z [main] cordapp.CordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-d3353c47-aa84-4fe5-8639-d58d29316dd7.jar, rootPackageName=null), RestrictedURL(url=file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-e72ace51-6ce1-405b-82a6-ea0ff37362ae.jar, rootPackageName=null) {}
[INFO ] 2019-02-11T07:21:12,839Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:21:12,843Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:21:12,861Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.contract-d3353c47-aa84-4fe5-8639-d58d29316dd7.jar {}
[INFO ] 2019-02-11T07:21:12,897Z [main] cordapp.CordappLoader.scanCordapp - Scanning CorDapp in file:/home/shubham/MDrive/WORK/r3/samples/cordapp-example/java-source/build/tmp/generated-test-cordapps/com.nec.endmile.schema-e72ace51-6ce1-405b-82a6-ea0ff37362ae.jar {}
[INFO ] 2019-02-11T07:21:13,075Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@73d7e7aa {}
[INFO ] 2019-02-11T07:21:13,866Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:21:13,918Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:13,923Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:16,294Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:16,920Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:21:16,924Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:16,940Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:17,077Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:17,080Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:17,278Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:21:17,289Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T07:21:17,431Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T07:21:17,695Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F94FE685FDAEFA9287CFB41FB3A4B55DC9CA19AC7CC02DB3D34A7F53A849D46D, not inserting the second time {}
[INFO ] 2019-02-11T07:21:17,815Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:17,846Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:17,849Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:17,852Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:17,855Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:17,858Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:17,865Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:21:17,868Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:21:17,907Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:21:17,926Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@619b2232 {}
[INFO ] 2019-02-11T07:21:17,948Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:21:17,952Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:17,955Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:18,192Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:18,211Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:21:18,213Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,221Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:18,230Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,233Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,313Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:21:18,316Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:21:18,346Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DC155201822E856D087E2B54F9D43E3549E1E296BBD8F39C0503F9179EB318CB, not inserting the second time {}
[INFO ] 2019-02-11T07:21:18,372Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:18,382Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:18,413Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:18,420Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,428Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:18,452Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,456Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,464Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:18,467Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,470Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,472Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:18,475Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:18,481Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:21:18,484Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:21:18,514Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:21:18,531Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@72c3bc5e {}
[INFO ] 2019-02-11T07:21:18,546Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:21:18,549Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:18,552Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:18,758Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:18,777Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:21:18,782Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:18,793Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:18,801Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:18,803Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:18,925Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:21:18,928Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:21:18,951Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 26ABCCABA45A21974E1E8485BDA1DD117825D58A483CC06CBEE31F95D1D338C4, not inserting the second time {}
[INFO ] 2019-02-11T07:21:18,974Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:18,982Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:19,006Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869676923) {}
[INFO ] 2019-02-11T07:21:19,012Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:19,017Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:19,037Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:19,040Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:19,046Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:19,070Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869678213) {}
[INFO ] 2019-02-11T07:21:19,073Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:19,080Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:19,099Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:19,102Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:19,110Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:19,112Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:19,114Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[INFO ] 2019-02-11T07:21:19,116Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:19,118Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869678782) {}
[WARN ] 2019-02-11T07:21:19,805Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[WARN ] 2019-02-11T07:21:19,834Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[INFO ] 2019-02-11T07:21:20,169Z [Mock network] flow.[655a18d8-1483-4dd5-86d4-a80c5a91a197].initiateSession - Initiating flow session with party O=NECAuto, L=New York, C=US. Session id for tracing purposes is SessionId(toLong=-3235402917242517834). {}
[INFO ] 2019-02-11T07:21:20,374Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Amazon, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-3235402917242517834). {invocation_id=cc62f8ba-8b6f-4688-96f8-58412f1e733c, invocation_timestamp=2019-02-11T07:21:20.365Z, session_id=cc62f8ba-8b6f-4688-96f8-58412f1e733c, session_timestamp=2019-02-11T07:21:20.365Z}
[INFO ] 2019-02-11T07:21:20,597Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.nec.endmile.state.CourierState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T07:21:20,654Z [main] vault.NodeVaultService._queryBy - Vault Query for contract type: class com.nec.endmile.state.CourierState, criteria: VaultQueryCriteria(status=UNCONSUMED, contractStateTypes=null, stateRefs=null, notary=null, softLockingCondition=null, timeCondition=null), pagination: PageSpecification(pageNumber=-1, pageSize=200), sorting: Sort(columns=[]) {}
[INFO ] 2019-02-11T07:21:20,811Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:21:20,822Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:21:20,833Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6a6b5f00 {}
[INFO ] 2019-02-11T07:21:20,854Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:21:20,858Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:20,860Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:21,087Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotaryV1(name=net.corda.node.services.schema.NodeSchemaService$NodeNotary, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:21,103Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:21:21,106Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,113Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:21,130Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,133Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,210Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:21:21,213Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[INFO ] 2019-02-11T07:21:21,229Z [main] internal.InternalMockNetwork$MockNode.makeNotaryService - Running core notary: net.corda.node.services.transactions.ValidatingNotaryService {}
[WARN ] 2019-02-11T07:21:21,246Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C7A9FCF40E594647779E2AD1443B63E6A0732E2B9EA87B5DC20D5A52A45A7BE8, not inserting the second time {}
[INFO ] 2019-02-11T07:21:21,259Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,273Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:21,276Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,284Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:21,288Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,293Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:21:21,295Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:21:21,334Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/1/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:21:21,348Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@4308744c {}
[INFO ] 2019-02-11T07:21:21,372Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:21:21,374Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:21,378Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:21,552Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:21,569Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:21:21,573Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,582Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:21,590Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,593Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,667Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:21:21,669Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:21:21,693Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 676928C1B291BEE1E048731A7F1BB48BF299376CC87D03E9A67295016520D60A, not inserting the second time {}
[INFO ] 2019-02-11T07:21:21,702Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,707Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:21,737Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:21,740Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,750Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:21,769Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,771Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,781Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:21,783Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,786Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,788Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:21,790Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:21,796Z [main] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[WARN ] 2019-02-11T07:21:21,798Z [main] internal.InternalMockNetwork$MockNode.initCertificate - Corda node is running in dev mode. {}
[INFO ] 2019-02-11T07:21:21,827Z [main] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store /nodes/2/certificates/nodekeystore.jks, generating fresh key! {}
[INFO ] 2019-02-11T07:21:21,846Z [main] internal.NetworkParametersReader.retrieveNetworkParameters - Loaded network parameters: net.corda.core.internal.SignedDataWithCert@6d043931 {}
[INFO ] 2019-02-11T07:21:21,863Z [main] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-02-11T07:21:21,866Z [main] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:21,868Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:22,062Z [main] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CourierSchemaV1(name=com.nec.endmile.schema.CourierSchema, version=1)] {}
[INFO ] 2019-02-11T07:21:22,080Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-02-11T07:21:22,082Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,090Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:22,097Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,099Z [main] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,160Z [main] persistence.NodeAttachmentService.invoke - Stored new attachment 6E119A61CA9E7BED656D93587C1E7FDEDFF50B38C3C93D775BF0920D5ECDAEA7 {}
[WARN ] 2019-02-11T07:21:22,162Z [main] cordapp.CordappProviderImpl.verifyInstalledCordapps - The network parameters don't specify any whitelisted contract implementations. Please contact your zone operator. See https://docs.corda.net/network-map.html {}
[WARN ] 2019-02-11T07:21:22,189Z [main] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 38548E8031C667AE51CD0DC2550603AB5D297CCD3D568216498A8EB0BE052D89, not inserting the second time {}
[INFO ] 2019-02-11T07:21:22,199Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:22,205Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:22,222Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=1, serial=1549869681106) {}
[INFO ] 2019-02-11T07:21:22,225Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,230Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:22,247Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,250Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:22,254Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:22,274Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Amazon, L=London, C=GB], platformVersion=1, serial=1549869681573) {}
[INFO ] 2019-02-11T07:21:22,279Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,283Z [main] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-02-11T07:21:22,299Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,301Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,311Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:22,313Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,315Z [main] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[INFO ] 2019-02-11T07:21:22,317Z [main] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-02-11T07:21:22,319Z [main] network.PersistentNetworkMapCache.addNode - Done adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=NECAuto, L=New York, C=US], platformVersion=1, serial=1549869682082) {}
[WARN ] 2019-02-11T07:21:22,350Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[WARN ] 2019-02-11T07:21:22,371Z [Mock network] amqp.PropertySerializer.<init> - Create property Serializer for private property 'autoNodes' not exposed by a getter on class 'class com.nec.endmile.state.CourierState'
	NOTE: This behaviour will be deprecated at some point in the future and a getter required {}
[INFO ] 2019-02-11T07:21:22,494Z [Mock network] flow.[c559de8d-38fd-4f4f-8fb0-406eb3f4041e].initiateSession - Initiating flow session with party O=NECAuto, L=New York, C=US. Session id for tracing purposes is SessionId(toLong=-593878122340718295). {}
[INFO ] 2019-02-11T07:21:22,577Z [Mock network] statemachine.StateMachineManagerImpl.onSessionInit - Accepting flow session from party O=Amazon, L=London, C=GB. Session id for tracing purposes is SessionId(toLong=-593878122340718295). {invocation_id=08e0f36f-0a55-468d-956b-0610c4f23fba, invocation_timestamp=2019-02-11T07:21:22.570Z, session_id=08e0f36f-0a55-468d-956b-0610c4f23fba, session_timestamp=2019-02-11T07:21:22.570Z}
